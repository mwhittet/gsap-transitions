{"version":3,"sources":["components/Header.js","components/Footer.js","components/Title.js","App.js","pages/home.js","pages/about.js","pages/contact.js","serviceWorker.js","index.js"],"names":["Header","to","process","exact","activeClassName","Footer","Date","getFullYear","Title","lineContent","lineContent2","line1","useRef","line2","useEffect","gsap","from","delay","ease","y","stagger","amount","className","ref","el","routes","path","name","Component","App","onEnter","node","children","firstElementChild","lastElementChild","opacity","onExit","map","key","match","CSSTransition","in","timeout","classNames","onEntering","unmountOnExit","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAmBeA,G,MAhBA,WACb,OACE,gCACE,kBAAC,IAAD,CAASC,GAAIC,qBAA8BC,OAAK,EAACC,gBAAgB,UAAjE,QAGA,kBAAC,IAAD,CAASH,GAAIC,0BAAmCC,OAAK,EAACC,gBAAgB,UAAtE,SAGA,kBAAC,IAAD,CAASH,GAAIC,4BAAqCC,OAAK,EAACC,gBAAgB,UAAxE,cCNSC,EAJA,WACb,OAAO,yCAAgB,IAAIC,MAAOC,cAA3B,kBC2BMC,EA3BD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACxBC,EAAQC,iBAAO,MACfC,EAAQD,iBAAO,MAanB,OAXAE,qBAAU,WACRC,IAAKC,KAAK,CAACL,EAAOE,GAAQ,GAAK,CAC7BI,MAAO,GACPC,KAAM,aACNC,EAAG,GACHC,QAAS,CACPC,OAAQ,SAGX,CAACV,EAAOE,IAGT,4BACE,yBAAKS,UAAU,aACb,yBAAKC,IAAK,SAAAC,GAAE,OAAKb,EAAQa,IAAMf,IAEjC,yBAAKa,UAAU,aACb,yBAAKC,IAAK,SAAAC,GAAE,OAAKX,EAAQW,IAAMd,MCXjCe,EAAS,CACb,CAAEC,KAAMxB,qBAA8ByB,KAAM,OAAQC,UCVzC,WACX,OACE,yBAAKN,UAAU,SACb,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,cAC9C,oTDOJ,CAAEgB,KAAMxB,0BAAmCyB,KAAM,QAASC,UEXvC,WACnB,OACE,yBAAKN,UAAU,SACb,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,eAC9C,sWFQJ,CAAEgB,KAAMxB,4BAAqCyB,KAAM,UAAWC,UGZhD,WACd,OACE,yBAAKN,UAAU,SACb,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,iBAC9C,+XHsESmB,MA3Df,WACE,IAAMC,EAAU,SAAAC,GACdhB,IAAKC,KACH,CAACe,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACEf,EAAG,GACHF,MAAO,GACPC,KAAM,eACNiB,QAAS,EACTf,QAAS,CACPC,OAAQ,OAMVe,EAAS,SAAAL,GACbhB,IAAKd,GACH,CAAC8B,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACEf,GAAI,GACJD,KAAM,eACNE,QAAS,CACPC,OAAQ,OAMhB,OACE,yBAAKC,UAAU,WACb,kBAAC,EAAD,MACA,8BACGG,EAAOY,KAAI,gBAAGX,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,UAAf,OACV,kBAAC,IAAD,CAAOU,IAAKX,EAAMD,KAAMA,EAAMvB,OAAK,IAChC,gBAAGoC,EAAH,EAAGA,MAAH,OACC,kBAACC,EAAA,EAAD,CACEC,GAAa,MAATF,EACJG,QAAS,KACTC,WAAW,OACXP,OAAQA,EACRQ,WAAYd,EACZe,eAAa,GAEb,yBAAKvB,UAAU,QACb,kBAACM,EAAD,eAOZ,kBAAC,EAAD,QI7DckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCXNW,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.498e1d5f.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <header>\n      <NavLink to={process.env.PUBLIC_URL + '/'} exact activeClassName=\"active\">\n        Home\n      </NavLink>\n      <NavLink to={process.env.PUBLIC_URL + '/about'} exact activeClassName=\"active\">\n        About\n      </NavLink>\n      <NavLink to={process.env.PUBLIC_URL + '/contact'} exact activeClassName=\"active\">\n        Contact\n      </NavLink>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <footer>&copy; {new Date().getFullYear()} company name</footer>;\n};\n\nexport default Footer;\n","import React, { useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\n\nconst Title = ({ lineContent, lineContent2 }) => {\n  let line1 = useRef(null);\n  let line2 = useRef(null);\n\n  useEffect(() => {\n    gsap.from([line1, line2], 0.8, {\n      delay: 0.8,\n      ease: \"power3.out\",\n      y: 64,\n      stagger: {\n        amount: 0.15\n      }\n    });\n  }, [line1, line2]);\n\n  return (\n    <h1>\n      <div className=\"line-wrap\">\n        <div ref={el => (line1 = el)}>{lineContent}</div>\n      </div>\n      <div className=\"line-wrap\">\n        <div ref={el => (line2 = el)}>{lineContent2}</div>\n      </div>\n    </h1>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { gsap } from \"gsap\";\nimport \"./App.scss\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nimport Home from \"./pages/home\";\nimport About from \"./pages/about\";\nimport Contact from \"./pages/contact\";\n\nconst routes = [\n  { path: process.env.PUBLIC_URL + '/', name: \"Home\", Component: Home },\n  { path: process.env.PUBLIC_URL + '/about', name: \"About\", Component: About },\n  { path: process.env.PUBLIC_URL + '/contact', name: \"Contact\", Component: Contact }\n];\n\nfunction App() {\n  const onEnter = node => {\n    gsap.from(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: 30,\n        delay: 0.6,\n        ease: \"power3.InOut\",\n        opacity: 0,\n        stagger: {\n          amount: 0.6\n        }\n      }\n    );\n  };\n\n  const onExit = node => {\n    gsap.to(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: -30,\n        ease: \"power3.InOut\",\n        stagger: {\n          amount: 0.2\n        }\n      }\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <main>\n        {routes.map(({ path, name, Component }) => (\n          <Route key={name} path={path} exact>\n            {({ match }) => (\n              <CSSTransition\n                in={match != null}\n                timeout={1200}\n                classNames=\"page\"\n                onExit={onExit}\n                onEntering={onEnter}\n                unmountOnExit\n              >\n                <div className=\"page\">\n                  <Component />\n                </div>\n              </CSSTransition>\n            )}\n          </Route>\n        ))}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nimport Title from \"../components/Title\";\n\nconst Home = () => {\n  return (\n    <div className=\"inner\">\n      <Title lineContent=\"This is the\" lineContent2=\"home page\" />\n      <p>\n        As two far of including tag the as his the initial those\n        decision-making. The lots girl which although of goat, in lay with be\n        negatives, return her energetic in the for man drew totally it fully the\n        of have made expand fall go the best implemented write as thoughts\n        labour.\n      </p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport Title from \"../components/Title\";\n\nexport const About = () => {\n  return (\n    <div className=\"inner\">\n      <Title lineContent=\"This is the\" lineContent2=\"about page\" />\n      <p>\n        End leave monitor when my should towards certainly carefully come\n        assisted one her line and associate subject every a nonetheless,\n        creating new her choose line sufficient harmonics. Western everyone. May\n        it little be to being understanding. Abused conflict- text upper to and\n        distinct leather more make would but simple, to.\n      </p>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nimport Title from \"../components/Title\";\n\nconst Contact = () => {\n  return (\n    <div className=\"inner\">\n      <Title lineContent=\"This is the\" lineContent2=\"contact page\" />\n      <p>\n        Success feel. Mr. Been have to his drunk never requests the space the\n        divided his funny of to be associate brought of at started still are,\n        interaction sported would and the him laminated involved. One to hotel\n        in very have is turn of arrange belong, I big wrong between let that is\n        will and case longer it raised as she better we alarm issued too.\n      </p>\n    </div>\n  );\n};\n\nexport default Contact;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}